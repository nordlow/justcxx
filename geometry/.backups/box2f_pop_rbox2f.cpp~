#include "box2f_pop_rbox2f.h"

int
box2f_rlay_popOut_rbox2f(const box2f * boxA, rbox2f * rboxB,
                         const vec2f * rdim, const vec2f * rradI,
                         float prg, float rposE,
                         BOXEDGE_t boxedge)
{
  int ret = 0;

  vec2f dimA; box2f_rdDim(boxA, &dimA);
  vec2f dimB; vec2f_set(&dimB, dimA.x * rdim->x, dimA.y * rdim->y);

  box2f boxC;
  CORNMASK_t cornmask = CORNMASK_FULL;
  switch (boxedge) {
  case BOXEDGE_TOP: {
    vec2f cenB;			/* Bottom Center of rboxB */
    vec2f_set(&cenB, boxA->l.x + dimA.x * rposE, boxA->l.y);
    box2f_setBCenDim(&boxC, &cenB, &dimB); /* Bottom Center & Dim => Ext */
    cornmask = CORNMASK_TOP;
    break;
  }
  case BOXEDGE_BOT: {
    vec2f cenT;			/* Top Center of rboxB */
    vec2f_set(&cenT, boxA->l.x + dimA.x * rposE, boxA->u.y);
    box2f_setTCenDim(&boxC, &cenT, &dimB); /* Top Center & Dim => Ext */
    cornmask = CORNMASK_BOTTOM;
    break;
  }
  case BOXEDGE_LEFT: {
    vec2f cenR;			/* Right Center of rboxB */
    vec2f_set(&cenR, boxA->l.x, boxA->u.y - dimA.y * rposE);
    box2f_setRCenDim(&boxC, &cenR, &dimB); /* Right Center & Dim => Ext */
    cornmask = CORNMASK_LEFT;
    break;
  }
  case BOXEDGE_RIGHT: {
    vec2f cenL;			/* Left Center of rboxB */
    vec2f_set(&cenL, boxA->u.x, boxA->u.y - dimA.y * rposE);
    box2f_setLCenDim(&boxC, &cenL, &dimB); /* Left Center & Dim => Ext */
    cornmask = CORNMASK_RIGHT;
    break;
  }
  default:
    PWARN("Cannot handle boxedge %d. Defaulting boxC to boxA\n", boxedge);
    boxC = *boxA;
    cornmask = CORNMASK_FULL;
    break;
  }

  rbox2f_set_OBox_IRRad(rboxB, &boxC, rradI, cornmask, CORNSTYLE_ELL_MIN);

  return ret;
}

int
box2f_rlay_popOut_box2f(const box2f * boxA, box2f * boxB,
                        const vec2f * rdim,
                        float prg, float rposE,
                        BOXEDGE_t boxedge)
{
  int ret = 0;

  vec2f dimA; box2f_rdDim(boxA, &dimA);
  vec2f dimB; vec2f_set(&dimB, dimA.x * rdim->x, dimA.y * rdim->y);

  switch (boxedge) {
  case BOXEDGE_TOP: {
    vec2f cenB;			/* Bottom Center of rboxB */
    vec2f_set(&cenB, boxA->l.x + dimA.x * rposE, boxA->l.y);
    box2f_setBCenDim(boxB, &cenB, &dimB); /* Bottom Center & Dim => Ext */
    break;
  }
  case BOXEDGE_BOT: {
    vec2f cenT;			/* Top Center of rboxB */
    vec2f_set(&cenT, boxA->l.x + dimA.x * rposE, boxA->u.y);
    box2f_setTCenDim(boxB, &cenT, &dimB); /* Top Center & Dim => Ext */
    break;
  }
  case BOXEDGE_LEFT: {
    vec2f cenR;			/* Right Center of rboxB */
    vec2f_set(&cenR, boxA->l.x, boxA->u.y - dimA.y * rposE);
    box2f_setRCenDim(boxB, &cenR, &dimB); /* Right Center & Dim => Ext */
    break;
  }
  case BOXEDGE_RIGHT: {
    vec2f cenL;			/* Left Center of rboxB */
    vec2f_set(&cenL, boxA->u.x, boxA->u.y - dimA.y * rposE);
    box2f_setLCenDim(boxB, &cenL, &dimB); /* Left Center & Dim => Ext */
    break;
  }
  default:
    PWARN("Cannot handle boxedge %d. Defaulting boxB to boxA\n", boxedge);
    *boxB = *boxA;
    break;
  }

  return ret;
}
